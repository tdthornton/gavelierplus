package com.gavelier.gavelierplus.domain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Objects;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;

@DynamoDBTable(tableName = "lots")
public class Lot implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    
    private String id;


    @NotNull
    @NotBlank
    private String auctionId;


    @Min(value = 1, message="The seller number is too low. ")
    private int sellerNumber;

    @NotNull
    @Min(1)
    private int lotNumber;

    @NotNull(message = "The description cannot be empty. ")
    @NotBlank(message = "The description cannot be empty. ")
    private String desc;
    private String estimate;
    private String reserve;

    private BigDecimal salePrice;

    private BigDecimal costToBuyer;

    private BigDecimal paymentToSeller;

    public Lot() {
    }

    public Lot(String id, String auctionId, int sellerNumber, int lotNumber, String desc, String estimate,
            String reserve, BigDecimal salePrice, BigDecimal costToBuyer, BigDecimal paymentToSeller) {
        this.id = id;
        this.auctionId = auctionId;
        this.sellerNumber = sellerNumber;
        this.lotNumber = lotNumber;
        this.desc = desc;
        this.estimate = estimate;
        this.reserve = reserve;
        this.salePrice = salePrice;
        this.costToBuyer = costToBuyer;
        this.paymentToSeller = paymentToSeller;
    }

    public Lot(String auctionId, int sellerNumber, int lotNumber, String desc, String estimate, String reserve,
            BigDecimal salePrice, BigDecimal costToBuyer, BigDecimal paymentToSeller) {
        this.auctionId = auctionId;
        this.sellerNumber = sellerNumber;
        this.lotNumber = lotNumber;
        this.desc = desc;
        this.estimate = estimate;
        this.reserve = reserve;
        this.salePrice = salePrice;
        this.costToBuyer = costToBuyer;
        this.paymentToSeller = paymentToSeller;
    }

    @DynamoDBHashKey(attributeName="id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }


    @DynamoDBIndexHashKey(attributeName = "auctionId", globalSecondaryIndexName = "auctionId")
    public String getAuctionId() {
        return this.auctionId;
    }

    public void setAuctionId(String auctionId) {
        this.auctionId = auctionId;
    }

    @DynamoDBAttribute
    public int getSellerNumber() {
        return this.sellerNumber;
    }

    public void setSellerNumber(int sellerNumber) {
        this.sellerNumber = sellerNumber;
    }

    @DynamoDBAttribute
    public int getLotNumber() {
        return this.lotNumber;
    }

    public void setLotNumber(int lotNumber) {
        this.lotNumber = lotNumber;
    }

    @DynamoDBAttribute
    public String getDesc() {
        return this.desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    @DynamoDBAttribute
    public String getEstimate() {
        return this.estimate;
    }

    public void setEstimate(String estimate) {
        this.estimate = estimate;
    }

    @DynamoDBAttribute
    public String getReserve() {
        return this.reserve;
    }

    public void setReserve(String reserve) {
        this.reserve = reserve;
    }

    @DynamoDBAttribute
    public BigDecimal getSalePrice() {
        return this.salePrice;
    }

    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    @DynamoDBAttribute
    public BigDecimal getCostToBuyer() {
        return this.costToBuyer;
    }

    public void setCostToBuyer(BigDecimal costToBuyer) {
        this.costToBuyer = costToBuyer;
    }

    @DynamoDBAttribute
    public BigDecimal getPaymentToSeller() {
        return this.paymentToSeller;
    }

    public void setPaymentToSeller(BigDecimal paymentToSeller) {
        this.paymentToSeller = paymentToSeller;
    }

    

    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Lot)) {
            return false;
        }
        Lot lot = (Lot) o;
        return Objects.equals(id, lot.id) && Objects.equals(auctionId, lot.auctionId) && sellerNumber == lot.sellerNumber && lotNumber == lot.lotNumber && Objects.equals(desc, lot.desc) && Objects.equals(estimate, lot.estimate) && Objects.equals(reserve, lot.reserve) && Objects.equals(salePrice, lot.salePrice) && Objects.equals(costToBuyer, lot.costToBuyer) && Objects.equals(paymentToSeller, lot.paymentToSeller);
    }

    @Override
    public String toString() {
        return "{" + " id='" + getId() + "'" + ", auctionId='" + getAuctionId() + "'" + ", sellerNumber='"
                + getSellerNumber() + "'" + ", lotNumber='" + getLotNumber() + "'" + ", desc='" + getDesc() + "'"
                + ", estimate='" + getEstimate() + "'" + ", reserve='" + getReserve() + "'" + ", salePrice='"
                + getSalePrice() + "'" + ", costToBuyer='" + getCostToBuyer() + "'" + ", paymentToSeller='"
                + getPaymentToSeller() + "'" + "}";
    }

}